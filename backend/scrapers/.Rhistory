if (length(table_list) == 0) {
message(sprintf("No play-by-play tables found for game ID %s", game_id))
return(data.frame())
}
date_slug <- pbp_payload %>%
rvest::html_elements("tr:nth-child(4) .grey_text") %>%
rvest::html_text(trim=T)
loc_slug <- pbp_payload %>%
rvest::html_elements("tr:nth-child(5) .grey_text") %>%
rvest::html_text(trim=T)
att <- pbp_payload %>%
rvest::html_elements("tr:nth-child(6) .grey_text") %>%
rvest::html_text(trim=T)
add_inning_column <- function(df, inning) {
df$inning <- inning
return(df)
}
mapped_table <- lapply(seq_along(table_list), function(i) add_inning_column(table_list[[i]], i))
mapped_table <- dplyr::bind_rows(mapped_table)
if (nrow(mapped_table) == 0) {
message(sprintf("No play-by-play data found for game ID %s", game_id))
return(data.frame())
}
col_names <- names(mapped_table)
away_team <- col_names[1]
home_team <- col_names[3]
mapped_table <- mapped_table %>%
dplyr::rename(away_des = 1, home_des = 3) %>%
dplyr::mutate(
away_team = away_team,
home_team = home_team,
game_id = as.numeric(gsub("\\D", "", url)),
date = substr(date_slug, start = 1, stop = 10),
year = as.integer(format(as.Date(date, "%m/%d/%Y"), "%Y")),
away_text = ifelse(away_des != "", away_des, ""),
home_text = ifelse(home_des != "", home_des, ""),
away_score = gsub("-.*", "", Score),
home_score = gsub(".*-", "", Score)
) %>%
dplyr::filter(!grepl("LOB:", away_des) & !grepl("LOB:", home_des))
mapped_table <- mapped_table %>%
dplyr::select(
year,
date,
game_id,
inning,
away_team,
home_team,
away_score,
home_score,
away_text,
home_text
)
return(mapped_table)
}
get_schedules <- function(division, year) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules/d%d_%d_schedules.csv", division, year)
if (file.exists(file_path)) {
schedules <- read.csv(file_path)
if ("contest_id" %in% colnames(schedules)) {
schedules <- schedules[!duplicated(schedules$contest_id), ]
} else {
message("contest_id column not found in the schedule file.")
}
return(schedules)
} else {
message(sprintf("Schedule file not found for Division %d, Year %d", division, year))
return(data.frame())
}
}
for (division in c(1, 2)) {
for (year in 2021:2024) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/play_by_play/d%d_pbp_%d.csv", division, year)
if (file.exists(file_path)) {
next
}
message(sprintf("Processing Division %d, Year %d", division, year))
schedules <- get_schedules(division, year)
if (nrow(schedules) == 0) {
message(sprintf("No schedules found for Division %d, Year %d - skipping", division, year))
next
}
pbp_data <- get_pbp_data(schedules)
if (nrow(pbp_data) == 0) {
message(sprintf("No play-by-play data collected for Division %d, Year %d - skipping file write", division, year))
next
}
output_file <- sprintf(file_path, division, year)
write_csv(pbp_data, output_file)
message(sprintf("Saved data to %s", output_file))
Sys.sleep(2)
}
}
library(baseballr)
library(collegebaseball)
library(dplyr)
get_schedules <- function(year = 2024, division = 1) {
teams_df <- baseballr:::rds_from_url(
"https://raw.githubusercontent.com/robert-frey/college-baseball/main/ncaa_team_lookup.rds"
) %>%
dplyr::filter(year == !!year,
division %in% !!division) %>%
distinct(team_name, .keep_all = TRUE)
team_names <- teams_df$team_name
team_ids <- data.frame(team_name = character(), team_id = numeric(), stringsAsFactors = FALSE)
all_schedules <- data.frame()
message(sprintf("Processing %d teams for year %d, division %d", length(team_names), year, division))
for (team in team_names) {
tryCatch({
id_result <- ncaa_school_id_lookup(team_name = team, season = year)
if (nrow(id_result) > 0) {
team_ids <- rbind(team_ids, data.frame(team_name = team, team_id = id_result$team_id[1]))
message(sprintf("Found ID for %s: %s", team, id_result$team_id[1]))
}
}, error = function(e) {
message(sprintf("Error looking up ID for team %s: %s", team, e$message))
})
}
for (id in team_ids$team_id) {
tryCatch({
schedule <- ncaa_schedule(team_id = id, year = year)
if (!is.null(schedule) && nrow(schedule) > 0) {
schedule$year <- year  # Add year column
schedule$division <- division  # Add division column
all_schedules <- rbind(all_schedules, schedule)
message(sprintf("Got schedule for team ID %s with %d games", id, nrow(schedule)))
}
}, error = function(e) {
message(sprintf("Error getting schedule for team ID %s: %s", id, e$message))
})
}
return(all_schedules)
}
dir.create("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules", showWarnings = FALSE)
for (division in c(3)) {
division_schedules <- data.frame()
for (year in 2021:2024) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules/d%d_%d_schedules.csv", division, year)
if (file.exists(file_path)) {
next
}
message(sprintf("Processing Division %d, Year %d", division, year))
year_schedules <- get_schedules(year = year, division = division)
if (nrow(year_schedules) > 0) {
if ("contest_id" %in% names(year_schedules)) {
year_schedules <- year_schedules %>% distinct(contest_id, .keep_all = TRUE)
}
write.csv(
year_schedules,
file_path,
row.names = FALSE
)
division_schedules <- rbind(division_schedules, year_schedules)
message(sprintf("Added %d games for Division %d, Year %d",
nrow(year_schedules), division, year))
} else {
message(sprintf("No schedules found for Division %d, Year %d", division, year))
}
}
}
library(baseballr)
library(collegebaseball)
library(dplyr)
get_schedules <- function(year = 2024, division = 1) {
teams_df <- baseballr:::rds_from_url(
"https://raw.githubusercontent.com/robert-frey/college-baseball/main/ncaa_team_lookup.rds"
) %>%
dplyr::filter(year == !!year,
division %in% !!division) %>%
distinct(team_name, .keep_all = TRUE)
team_names <- teams_df$team_name
team_ids <- data.frame(team_name = character(), team_id = numeric(), stringsAsFactors = FALSE)
all_schedules <- data.frame()
message(sprintf("Processing %d teams for year %d, division %d", length(team_names), year, division))
for (team in team_names) {
tryCatch({
id_result <- ncaa_school_id_lookup(team_name = team, season = year)
if (nrow(id_result) > 0) {
team_ids <- rbind(team_ids, data.frame(team_name = team, team_id = id_result$team_id[1]))
message(sprintf("Found ID for %s: %s", team, id_result$team_id[1]))
}
}, error = function(e) {
message(sprintf("Error looking up ID for team %s: %s", team, e$message))
})
}
for (id in team_ids$team_id) {
tryCatch({
schedule <- ncaa_schedule(team_id = id, year = year)
if (!is.null(schedule) && nrow(schedule) > 0) {
schedule$year <- year  # Add year column
schedule$division <- division  # Add division column
all_schedules <- rbind(all_schedules, schedule)
message(sprintf("Got schedule for team ID %s with %d games", id, nrow(schedule)))
}
}, error = function(e) {
message(sprintf("Error getting schedule for team ID %s: %s", id, e$message))
})
}
return(all_schedules)
}
dir.create("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules", showWarnings = FALSE)
for (division in c(3)) {
division_schedules <- data.frame()
for (year in 2023:2024) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules/d%d_%d_schedules.csv", division, year)
if (file.exists(file_path)) {
next
}
message(sprintf("Processing Division %d, Year %d", division, year))
year_schedules <- get_schedules(year = year, division = division)
if (nrow(year_schedules) > 0) {
if ("contest_id" %in% names(year_schedules)) {
year_schedules <- year_schedules %>% distinct(contest_id, .keep_all = TRUE)
}
write.csv(
year_schedules,
file_path,
row.names = FALSE
)
division_schedules <- rbind(division_schedules, year_schedules)
message(sprintf("Added %d games for Division %d, Year %d",
nrow(year_schedules), division, year))
} else {
message(sprintf("No schedules found for Division %d, Year %d", division, year))
}
}
}
library(baseballr)
library(collegebaseball)
library(dplyr)
get_schedules <- function(year = 2024, division = 1) {
teams_df <- baseballr:::rds_from_url(
"https://raw.githubusercontent.com/robert-frey/college-baseball/main/ncaa_team_lookup.rds"
) %>%
dplyr::filter(year == !!year,
division %in% !!division) %>%
distinct(team_name, .keep_all = TRUE)
team_names <- teams_df$team_name
team_ids <- data.frame(team_name = character(), team_id = numeric(), stringsAsFactors = FALSE)
all_schedules <- data.frame()
message(sprintf("Processing %d teams for year %d, division %d", length(team_names), year, division))
for (team in team_names) {
tryCatch({
id_result <- ncaa_school_id_lookup(team_name = team, season = year)
if (nrow(id_result) > 0) {
team_ids <- rbind(team_ids, data.frame(team_name = team, team_id = id_result$team_id[1]))
message(sprintf("Found ID for %s: %s", team, id_result$team_id[1]))
}
}, error = function(e) {
message(sprintf("Error looking up ID for team %s: %s", team, e$message))
})
}
for (id in team_ids$team_id) {
tryCatch({
schedule <- ncaa_schedule(team_id = id, year = year)
if (!is.null(schedule) && nrow(schedule) > 0) {
schedule$year <- year  # Add year column
schedule$division <- division  # Add division column
all_schedules <- rbind(all_schedules, schedule)
message(sprintf("Got schedule for team ID %s with %d games", id, nrow(schedule)))
}
}, error = function(e) {
message(sprintf("Error getting schedule for team ID %s: %s", id, e$message))
})
}
return(all_schedules)
}
dir.create("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules", showWarnings = FALSE)
for (division in c(3)) {
division_schedules <- data.frame()
for (year in 2023:2024) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules/d%d_%d_schedules.csv", division, year)
if (file.exists(file_path)) {
next
}
message(sprintf("Processing Division %d, Year %d", division, year))
year_schedules <- get_schedules(year = year, division = division)
if (nrow(year_schedules) > 0) {
if ("contest_id" %in% names(year_schedules)) {
year_schedules <- year_schedules %>% distinct(contest_id, .keep_all = TRUE)
}
write.csv(
year_schedules,
file_path,
row.names = FALSE
)
division_schedules <- rbind(division_schedules, year_schedules)
message(sprintf("Added %d games for Division %d, Year %d",
nrow(year_schedules), division, year))
} else {
message(sprintf("No schedules found for Division %d, Year %d", division, year))
}
}
}
library(dplyr)
library(purrr)
library(collegebaseball)
ncaa_stats_bulk <- function(year,
type = 'batting',
divisions = 3,
situation = "all") {
if (year < 2013) {
stop('Year must be greater than or equal to 2013')
}
if (!type %in% c("batting", "pitching", "fielding")) {
stop('Type must be "batting", "pitching", or "fielding"')
}
teams_lookup <- baseballr:::rds_from_url(
"https://raw.githubusercontent.com/robert-frey/college-baseball/main/ncaa_team_lookup.rds"
) %>%
dplyr::filter(year == !!year,
division %in% !!divisions) %>%
distinct(team_id, .keep_all = TRUE)
total_teams <- nrow(teams_lookup)
cli::cli_alert_info(paste("Retrieving", type, "stats for", total_teams, "teams"))
safe_ncaa_stats <- purrr::safely(ncaa_stats)
results <- purrr::map(
seq_len(nrow(teams_lookup)),
function(i) {
team <- teams_lookup[i,]
if (i %% 10 == 0) {
cli::cli_alert_info(paste("Processing team", i, "of", total_teams))
}
result <- safe_ncaa_stats(
team_id = team$team_id,
year = year,
type = type,
situation = situation
)
if (!is.null(result$error)) {
cli::cli_alert_warning(paste("Error processing team_id:", team$team_id))
return(NULL)
}
if (!is.null(result$result)) {
result$result <- result$result %>%
mutate(across(where(is.logical), as.character))
}
return(result$result)
}
)
combined_stats <- results %>%
purrr::compact() %>%
dplyr::bind_rows()
cli::cli_alert_success(paste("Retrieved stats for",
nrow(combined_stats),
"players across",
length(unique(combined_stats$team_id)),
"teams"))
return(combined_stats)
}
main <- function() {
setwd('C:/Users/kellyjc/Desktop/d3_app_improved/backend/scrapers')
for (division in 1:3) {
year <- 2023
batting <- ncaa_stats_bulk(year = year, type = "batting", divisions = division)
pitching <- ncaa_stats_bulk(year = year, type = "pitching", divisions = division)
div_name <- switch(division,
"1" = "d1",
"2" = "d2",
"3" = "d3"
)
write.csv(batting, paste0("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/", div_name, "_batting_2025.csv"))
write.csv(pitching, paste0("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/", div_name, "_pitching_2025.csv"))
}
}
library(dplyr)
library(purrr)
library(collegebaseball)
ncaa_stats_bulk <- function(year,
type = 'batting',
divisions = 3,
situation = "all") {
if (year < 2013) {
stop('Year must be greater than or equal to 2013')
}
if (!type %in% c("batting", "pitching", "fielding")) {
stop('Type must be "batting", "pitching", or "fielding"')
}
teams_lookup <- baseballr:::rds_from_url(
"https://raw.githubusercontent.com/robert-frey/college-baseball/main/ncaa_team_lookup.rds"
) %>%
dplyr::filter(year == !!year,
division %in% !!divisions) %>%
distinct(team_id, .keep_all = TRUE)
total_teams <- nrow(teams_lookup)
cli::cli_alert_info(paste("Retrieving", type, "stats for", total_teams, "teams"))
safe_ncaa_stats <- purrr::safely(ncaa_stats)
results <- purrr::map(
seq_len(nrow(teams_lookup)),
function(i) {
team <- teams_lookup[i,]
if (i %% 10 == 0) {
cli::cli_alert_info(paste("Processing team", i, "of", total_teams))
}
result <- safe_ncaa_stats(
team_id = team$team_id,
year = year,
type = type,
situation = situation
)
if (!is.null(result$error)) {
cli::cli_alert_warning(paste("Error processing team_id:", team$team_id))
return(NULL)
}
if (!is.null(result$result)) {
result$result <- result$result %>%
mutate(across(where(is.logical), as.character))
}
return(result$result)
}
)
combined_stats <- results %>%
purrr::compact() %>%
dplyr::bind_rows()
cli::cli_alert_success(paste("Retrieved stats for",
nrow(combined_stats),
"players across",
length(unique(combined_stats$team_id)),
"teams"))
return(combined_stats)
}
main <- function() {
setwd('C:/Users/kellyjc/Desktop/d3_app_improved/backend/scrapers')
for (division in 1:3) {
year <- 2023
batting <- ncaa_stats_bulk(year = year, type = "batting", divisions = division)
pitching <- ncaa_stats_bulk(year = year, type = "pitching", divisions = division)
div_name <- switch(division,
"1" = "d1",
"2" = "d2",
"3" = "d3"
)
write.csv(batting, paste0("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/", div_name, "_batting_2025.csv"))
write.csv(pitching, paste0("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/", div_name, "_pitching_2025.csv"))
}
}
main()
library(dplyr)
library(purrr)
library(collegebaseball)
ncaa_stats_bulk <- function(year,
type = 'batting',
divisions = 3,
situation = "all") {
if (year < 2013) {
stop('Year must be greater than or equal to 2013')
}
if (!type %in% c("batting", "pitching", "fielding")) {
stop('Type must be "batting", "pitching", or "fielding"')
}
teams_lookup <- baseballr:::rds_from_url(
"https://raw.githubusercontent.com/robert-frey/college-baseball/main/ncaa_team_lookup.rds"
) %>%
dplyr::filter(year == !!year,
division %in% !!divisions) %>%
distinct(team_id, .keep_all = TRUE)
total_teams <- nrow(teams_lookup)
cli::cli_alert_info(paste("Retrieving", type, "stats for", total_teams, "teams"))
safe_ncaa_stats <- purrr::safely(ncaa_stats)
results <- purrr::map(
seq_len(nrow(teams_lookup)),
function(i) {
team <- teams_lookup[i,]
if (i %% 10 == 0) {
cli::cli_alert_info(paste("Processing team", i, "of", total_teams))
}
result <- safe_ncaa_stats(
team_id = team$team_id,
year = year,
type = type,
situation = situation
)
if (!is.null(result$error)) {
cli::cli_alert_warning(paste("Error processing team_id:", team$team_id))
return(NULL)
}
if (!is.null(result$result)) {
result$result <- result$result %>%
mutate(across(where(is.logical), as.character))
}
return(result$result)
}
)
combined_stats <- results %>%
purrr::compact() %>%
dplyr::bind_rows()
cli::cli_alert_success(paste("Retrieved stats for",
nrow(combined_stats),
"players across",
length(unique(combined_stats$team_id)),
"teams"))
return(combined_stats)
}
main <- function() {
setwd('C:/Users/kellyjc/Desktop/d3_app_improved/backend/scrapers')
for (division in 1:2) {
year <- 2023
batting <- ncaa_stats_bulk(year = year, type = "batting", divisions = division)
pitching <- ncaa_stats_bulk(year = year, type = "pitching", divisions = division)
div_name <- switch(division,
"1" = "d1",
"2" = "d2",
"3" = "d3"
)
write.csv(batting, paste0("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/", div_name, "_batting_2025.csv"))
write.csv(pitching, paste0("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/", div_name, "_pitching_2025.csv"))
}
}
main()
gc()
gc()
write.csv(ncaa_stats_bulk(year = 2023, type = "batting", divisions = 1), paste0("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/d1_batting_2023.csv")
