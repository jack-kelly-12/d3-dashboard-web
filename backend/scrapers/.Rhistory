home_score,
away_text,
home_text
)
return(mapped_table)
}
get_schedules <- function(division, year) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules/d%d_%d_schedules.csv", division, year)
if (file.exists(file_path)) {
return(read.csv(file_path))
} else {
message(sprintf("Schedule file not found for Division %d, Year %d", division, year))
return(data.frame())
}
}
for (division in c(1, 2)) {
for (year in 2021:2024) {
message(sprintf("Processing Division %d, Year %d", division, year))
schedules <- get_schedules(division, year)
if (nrow(schedules) == 0) {
message(sprintf("No schedules found for Division %d, Year %d - skipping", division, year))
next
}
pbp_data <- get_pbp_data(schedules)
if (nrow(pbp_data) == 0) {
message(sprintf("No play-by-play data collected for Division %d, Year %d - skipping file write", division, year))
next
}
output_file <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/d%d_pbp_%d.csv", division, year)
write_csv(pbp_data, output_file)
message(sprintf("Saved data to %s", output_file))
Sys.sleep(2)
}
}
library(baseballr)
library(collegebaseball)
library(tidyverse)
library(httr)
library(rvest)
get_pbp_data <- function(schedules) {
all_games_pbp <- data.frame()
if (is.null(schedules) || nrow(schedules) == 0) {
message("No schedules provided to process")
return(data.frame())
}
if (!"contest_id" %in% names(schedules)) {
message("Error: contest_id column not found in schedules data")
return(data.frame())
}
for (i in 1:nrow(schedules)) {
game_id <- schedules$contest_id[i]
if (is.na(game_id) || is.null(game_id)) {
message(sprintf("Skipping row %d: Invalid game ID", i))
next
}
tryCatch({
pbp_data <- base_pbp(game_id = game_id)
message(sprintf('Processing pbp data for game: %s', game_id))
if (is.data.frame(pbp_data) && nrow(pbp_data) > 0) {
if (all(c("away_text", "home_text") %in% names(pbp_data))) {
pbp_data <- pbp_data %>%
filter(!(grepl("^\\d+-\\d+$", away_text) & grepl("^\\d+-\\d+$", home_text)))
if (nrow(pbp_data) > 0) {
all_games_pbp <- rbind(all_games_pbp, pbp_data)
} else {
message(sprintf("Game ID %s has no valid play-by-play data after filtering", game_id))
}
} else {
message(sprintf("Game ID %s data does not contain expected 'away_text' and 'home_text' columns", game_id))
}
} else {
message(sprintf("Game ID %s returned no data or invalid data structure", game_id))
}
}, error = function(e) {
message(sprintf("Error processing game ID %s: %s", game_id, e$message))
})
Sys.sleep(0.5)
}
if (nrow(all_games_pbp) == 0) {
message("Warning: No play-by-play data was collected for any games")
}
return(all_games_pbp)
}
base_pbp <- function(game_id = NA_real_, game_pbp_url = NA_character_, ...) {
if (is.na(game_pbp_url) && is.na(game_id)) {
stop("No game_info_url or game_id provided")
}
if (!is.na(game_id) & is.na(game_pbp_url)) {
url <- paste0("https://stats.ncaa.org/contests/", game_id, "/play_by_play")
} else {
url <- game_pbp_url
}
tryCatch({
pbp_payload <- xml2::read_html(url)
}, error = function(e) {
stop(sprintf("Failed to read URL for game ID %s: %s", game_id, e$message))
})
table_list <- tryCatch({
(pbp_payload %>%
rvest::html_elements("table"))[-c(1,2,3)] %>%
rvest::html_table()
}, error = function(e) {
stop(sprintf("Failed to parse tables for game ID %s: %s", game_id, e$message))
})
if (length(table_list) == 0) {
message(sprintf("No play-by-play tables found for game ID %s", game_id))
return(data.frame())
}
date_slug <- pbp_payload %>%
rvest::html_elements("tr:nth-child(4) .grey_text") %>%
rvest::html_text(trim=T)
loc_slug <- pbp_payload %>%
rvest::html_elements("tr:nth-child(5) .grey_text") %>%
rvest::html_text(trim=T)
att <- pbp_payload %>%
rvest::html_elements("tr:nth-child(6) .grey_text") %>%
rvest::html_text(trim=T)
add_inning_column <- function(df, inning) {
df$inning <- inning
return(df)
}
mapped_table <- lapply(seq_along(table_list), function(i) add_inning_column(table_list[[i]], i))
mapped_table <- dplyr::bind_rows(mapped_table)
if (nrow(mapped_table) == 0) {
message(sprintf("No play-by-play data found for game ID %s", game_id))
return(data.frame())
}
col_names <- names(mapped_table)
away_team <- col_names[1]
home_team <- col_names[3]
mapped_table <- mapped_table %>%
dplyr::rename(away_des = 1, home_des = 3) %>%
dplyr::mutate(
away_team = away_team,
home_team = home_team,
game_id = as.numeric(gsub("\\D", "", url)),
date = substr(date_slug, start = 1, stop = 10),
year = as.integer(format(as.Date(date, "%m/%d/%Y"), "%Y")),
away_text = ifelse(away_des != "", away_des, ""),
home_text = ifelse(home_des != "", home_des, ""),
away_score = gsub("-.*", "", Score),
home_score = gsub(".*-", "", Score)
) %>%
dplyr::filter(!grepl("LOB:", away_des) & !grepl("LOB:", home_des))
mapped_table <- mapped_table %>%
dplyr::select(
year,
date,
game_id,
inning,
away_team,
home_team,
away_score,
home_score,
away_text,
home_text
)
return(mapped_table)
}
get_schedules <- function(division, year) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules/d%d_%d_schedules.csv", division, year)
if (file.exists(file_path)) {
return(read.csv(file_path))
} else {
message(sprintf("Schedule file not found for Division %d, Year %d", division, year))
return(data.frame())
}
}
for (division in c(1, 2)) {
for (year in 2021:2024) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/play_by_play/d%d_pbp_%d.csv", division, year)
if (file.exists(file_path)) {
next
}
message(sprintf("Processing Division %d, Year %d", division, year))
schedules <- get_schedules(division, year)
if (nrow(schedules) == 0) {
message(sprintf("No schedules found for Division %d, Year %d - skipping", division, year))
next
}
pbp_data <- get_pbp_data(schedules)
if (nrow(pbp_data) == 0) {
message(sprintf("No play-by-play data collected for Division %d, Year %d - skipping file write", division, year))
next
}
output_file <- sprintf(file_path, division, year)
write_csv(pbp_data, output_file)
message(sprintf("Saved data to %s", output_file))
Sys.sleep(2)
}
}
library(baseballr)
library(collegebaseball)
library(tidyverse)
library(httr)
library(rvest)
get_pbp_data <- function(schedules) {
all_games_pbp <- data.frame()
if (is.null(schedules) || nrow(schedules) == 0) {
message("No schedules provided to process")
return(data.frame())
}
if (!"contest_id" %in% names(schedules)) {
message("Error: contest_id column not found in schedules data")
return(data.frame())
}
for (i in 1:nrow(schedules)) {
game_id <- schedules$contest_id[i]
if (is.na(game_id) || is.null(game_id)) {
message(sprintf("Skipping row %d: Invalid game ID", i))
next
}
tryCatch({
pbp_data <- base_pbp(game_id = game_id)
message(sprintf('Processing pbp data for game: %s', game_id))
if (is.data.frame(pbp_data) && nrow(pbp_data) > 0) {
if (all(c("away_text", "home_text") %in% names(pbp_data))) {
pbp_data <- pbp_data %>%
filter(!(grepl("^\\d+-\\d+$", away_text) & grepl("^\\d+-\\d+$", home_text)))
if (nrow(pbp_data) > 0) {
all_games_pbp <- rbind(all_games_pbp, pbp_data)
} else {
message(sprintf("Game ID %s has no valid play-by-play data after filtering", game_id))
}
} else {
message(sprintf("Game ID %s data does not contain expected 'away_text' and 'home_text' columns", game_id))
}
} else {
message(sprintf("Game ID %s returned no data or invalid data structure", game_id))
}
}, error = function(e) {
message(sprintf("Error processing game ID %s: %s", game_id, e$message))
})
Sys.sleep(0.5)
}
if (nrow(all_games_pbp) == 0) {
message("Warning: No play-by-play data was collected for any games")
}
return(all_games_pbp)
}
base_pbp <- function(game_id = NA_real_, game_pbp_url = NA_character_, ...) {
if (is.na(game_pbp_url) && is.na(game_id)) {
stop("No game_info_url or game_id provided")
}
if (!is.na(game_id) & is.na(game_pbp_url)) {
url <- paste0("https://stats.ncaa.org/contests/", game_id, "/play_by_play")
} else {
url <- game_pbp_url
}
tryCatch({
pbp_payload <- xml2::read_html(url)
}, error = function(e) {
stop(sprintf("Failed to read URL for game ID %s: %s", game_id, e$message))
})
table_list <- tryCatch({
(pbp_payload %>%
rvest::html_elements("table"))[-c(1,2,3)] %>%
rvest::html_table()
}, error = function(e) {
stop(sprintf("Failed to parse tables for game ID %s: %s", game_id, e$message))
})
if (length(table_list) == 0) {
message(sprintf("No play-by-play tables found for game ID %s", game_id))
return(data.frame())
}
date_slug <- pbp_payload %>%
rvest::html_elements("tr:nth-child(4) .grey_text") %>%
rvest::html_text(trim=T)
loc_slug <- pbp_payload %>%
rvest::html_elements("tr:nth-child(5) .grey_text") %>%
rvest::html_text(trim=T)
att <- pbp_payload %>%
rvest::html_elements("tr:nth-child(6) .grey_text") %>%
rvest::html_text(trim=T)
add_inning_column <- function(df, inning) {
df$inning <- inning
return(df)
}
mapped_table <- lapply(seq_along(table_list), function(i) add_inning_column(table_list[[i]], i))
mapped_table <- dplyr::bind_rows(mapped_table)
if (nrow(mapped_table) == 0) {
message(sprintf("No play-by-play data found for game ID %s", game_id))
return(data.frame())
}
col_names <- names(mapped_table)
away_team <- col_names[1]
home_team <- col_names[3]
mapped_table <- mapped_table %>%
dplyr::rename(away_des = 1, home_des = 3) %>%
dplyr::mutate(
away_team = away_team,
home_team = home_team,
game_id = as.numeric(gsub("\\D", "", url)),
date = substr(date_slug, start = 1, stop = 10),
year = as.integer(format(as.Date(date, "%m/%d/%Y"), "%Y")),
away_text = ifelse(away_des != "", away_des, ""),
home_text = ifelse(home_des != "", home_des, ""),
away_score = gsub("-.*", "", Score),
home_score = gsub(".*-", "", Score)
) %>%
dplyr::filter(!grepl("LOB:", away_des) & !grepl("LOB:", home_des))
mapped_table <- mapped_table %>%
dplyr::select(
year,
date,
game_id,
inning,
away_team,
home_team,
away_score,
home_score,
away_text,
home_text
)
return(mapped_table)
}
get_schedules <- function(division, year) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/schedules/d%d_%d_schedules.csv", division, year)
if (file.exists(file_path)) {
schedules <- read.csv(file_path)
if ("contest_id" %in% colnames(schedules)) {
schedules <- schedules[!duplicated(schedules$contest_id), ]
} else {
message("contest_id column not found in the schedule file.")
}
return(schedules)
} else {
message(sprintf("Schedule file not found for Division %d, Year %d", division, year))
return(data.frame())
}
}
for (division in c(1, 2)) {
for (year in 2021:2024) {
file_path <- sprintf("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/play_by_play/d%d_pbp_%d.csv", division, year)
if (file.exists(file_path)) {
next
}
message(sprintf("Processing Division %d, Year %d", division, year))
schedules <- get_schedules(division, year)
if (nrow(schedules) == 0) {
message(sprintf("No schedules found for Division %d, Year %d - skipping", division, year))
next
}
pbp_data <- get_pbp_data(schedules)
if (nrow(pbp_data) == 0) {
message(sprintf("No play-by-play data collected for Division %d, Year %d - skipping file write", division, year))
next
}
output_file <- sprintf(file_path, division, year)
write_csv(pbp_data, output_file)
message(sprintf("Saved data to %s", output_file))
Sys.sleep(2)
}
}
library(dplyr)
library(purrr)
library(collegebaseball)
library(DBI)
library(RSQLite)
ncaa_roster <- function(team_id = NULL, year, ...){
if (is.null(team_id)) {
cli::cli_abort("Enter valid team_id")
}
if (is.null(year)) {
cli::cli_abort("Enter valid year between 2010-2024 as a number (YYYY)")
}
url <- paste0("https://stats.ncaa.org/teams/", team_id, "/roster")
payload <- xml2::read_html(url)
data_read <- payload
payload1 <- (data_read |>
rvest::html_elements("table"))[[1]] |>
rvest::html_elements("tr")
table <- (data_read |>
rvest::html_elements("table"))[[1]] |>
rvest::html_table(trim=T)
roster <- table
extractor <- function(x){
data.frame(url_slug = ifelse(
is.null(
(x |>
rvest::html_elements("td"))[4] |>
rvest::html_element("a")),
NA_character_,
(x |>
rvest::html_elements("td"))[4] |>
rvest::html_element("a")  |>
rvest::html_attr("href")
))
}
url_slug <- lapply(payload1, extractor) |>
dplyr::bind_rows() |>
tail(-1)
roster <- table |>
dplyr::bind_cols(url_slug)
season_ids <- baseballr::load_ncaa_baseball_season_ids()
ncaa_teams_lookup <- baseballr:::rds_from_url("https://raw.githubusercontent.com/robert-frey/college-baseball/main/ncaa_team_lookup.rds")
school_info <- ncaa_teams_lookup |>
dplyr::filter(.data$team_id == {{team_id}} & .data$year == {{year}}) |>
dplyr::distinct()
roster <- roster |>
dplyr::mutate(
season = {{year}},
player_id = gsub(".*\\/players\\/", "", url_slug),
player_url = ifelse(is.na(player_id), NA, paste0("https://stats.ncaa.org", url_slug))
)
# Get all possible column names
all_columns <- c("Name", "Class", "Position", "GP", "GS", "#",
"Height", "Bats", "Throws", "Hometown", "High School")
# Add missing columns with NA values
for (col in all_columns) {
if (!col %in% names(roster)) {
roster[[col]] <- NA
}
}
# Select and rename columns
roster <- roster |>
dplyr::select(
"player_name" = "Name",
"class" = "Class",
"position" = "Position",
"games_played" = "GP",
"games_started" = "GS",
"number" = "#",
"height" = "Height",
"bats" = "Bats",
"throws" = "Throws",
"hometown" = "Hometown",
"high_school" = "High School",
"player_id",
"player_url"
)
school_info <- school_info |>
dplyr::slice(rep(1:n(), each = nrow(roster)))
roster <- roster |>
dplyr::bind_cols(school_info)
return(roster)
}
ncaa_roster_bulk <- function(year, divisions = 3) {
if (year < 2013) {
stop('Year must be greater than or equal to 2013')
}
teams_lookup <- baseballr:::rds_from_url(
"https://raw.githubusercontent.com/robert-frey/college-baseball/main/ncaa_team_lookup.rds"
) %>%
dplyr::filter(year == !!year,
division %in% !!divisions) %>%
distinct(team_id, .keep_all = TRUE)
total_teams <- nrow(teams_lookup)
cli::cli_alert_info(paste("Retrieving rosters for", total_teams, "teams"))
safe_ncaa_roster <- purrr::safely(ncaa_roster)
results <- purrr::map(
seq_len(nrow(teams_lookup)),
function(i) {
team <- teams_lookup[i,]
if (i %% 10 == 0) {
cli::cli_alert_info(paste("Processing team", i, "of", total_teams))
}
result <- safe_ncaa_roster(
team_id = team$team_id,
year = year
)
if (!is.null(result$error)) {
cli::cli_alert_warning(paste("Error processing team_id:", team$team_id))
return(NULL)
}
return(result$result)
}
)
combined_rosters <- results %>%
purrr::compact() %>%
dplyr::bind_rows()
cli::cli_alert_success(paste("Retrieved rosters for",
nrow(combined_rosters),
"players across",
length(unique(combined_rosters$team_id)),
"teams"))
return(combined_rosters)
}
main <- function() {
years <- 2021:2024
setwd('C:/Users/kellyjc/Desktop/d3_app_improved/backend/scrapers')
for (year in years) {
cli::cli_alert_info(paste("Processing year:", year))
for (division in 1:3) {
cli::cli_alert_info(paste("Processing division:", division))
rosters <- ncaa_roster_bulk(year = year, divisions = division)
div_name <- switch(division,
"1" = "d1",
"2" = "d2",
"3" = "d3"
)
output_path <- paste0("C:/Users/kellyjc/Desktop/d3_app_improved/backend/data/",
div_name, "_rosters_", year, ".csv")
write.csv(rosters, output_path, row.names = FALSE)
cli::cli_alert_success(paste("Saved CSV:", output_path))
con <- dbConnect(SQLite(), "C:/Users/kellyjc/Desktop/d3_app_improved/backend/ncaa.db")
safe_dbWriteTable <- function(conn, table_name, data, overwrite = TRUE) {
data <- data %>%
mutate(across(where(is.character), as.character),
across(where(is.numeric), as.numeric),
across(where(is.integer), as.integer))
dbWriteTable(conn, table_name, data, overwrite = overwrite)
row_count <- dbGetQuery(conn, sprintf("SELECT COUNT(*) as count FROM %s", table_name))
cli::cli_alert_success(sprintf("Wrote %d rows to table %s", row_count$count, table_name))
}
table_name <- paste0(div_name, "_rosters_", year)
safe_dbWriteTable(con, table_name, rosters)
dbDisconnect(con)
}
}
}
main()
